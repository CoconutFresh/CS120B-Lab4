
part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000216  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000884  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ff  00000000  00000000  0000130a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  0000160c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fc  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	70 d0       	rcall	.+224    	; 0x18a <main>
  aa:	79 c0       	rjmp	.+242    	; 0x19e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tick>:
#include <avr/io.h>
enum States {Start, Init, Inc, Dec, Hold, Reset}state;

void tick(){
	//Transitions
	switch(state){
  ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	31 f1       	breq	.+76     	; 0x102 <tick+0x54>
  b6:	28 f4       	brcc	.+10     	; 0xc2 <tick+0x14>
  b8:	88 23       	and	r24, r24
  ba:	49 f0       	breq	.+18     	; 0xce <tick+0x20>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	59 f0       	breq	.+22     	; 0xd6 <tick+0x28>
  c0:	46 c0       	rjmp	.+140    	; 0x14e <tick+0xa0>
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	31 f1       	breq	.+76     	; 0x112 <tick+0x64>
  c6:	08 f1       	brcs	.+66     	; 0x10a <tick+0x5c>
  c8:	85 30       	cpi	r24, 0x05	; 5
  ca:	a1 f1       	breq	.+104    	; 0x134 <tick+0x86>
  cc:	40 c0       	rjmp	.+128    	; 0x14e <tick+0xa0>
		case Start:
		{
			state = Init;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  d4:	08 95       	ret
		}
		
		case Init:
		if(PINA == 0x01)
  d6:	80 b1       	in	r24, 0x00	; 0
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	21 f4       	brne	.+8      	; 0xe4 <tick+0x36>
		{
			state = Inc;
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  e2:	43 c0       	rjmp	.+134    	; 0x16a <tick+0xbc>
			break;
		}
		else if(PINA == 0x02)
  e4:	80 b1       	in	r24, 0x00	; 0
  e6:	82 30       	cpi	r24, 0x02	; 2
  e8:	21 f4       	brne	.+8      	; 0xf2 <tick+0x44>
		{
			state = Dec;
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  f0:	43 c0       	rjmp	.+134    	; 0x178 <tick+0xca>
			break;
		}
		else if(PINA == 0x03)
  f2:	80 b1       	in	r24, 0x00	; 0
  f4:	83 30       	cpi	r24, 0x03	; 3
  f6:	09 f0       	breq	.+2      	; 0xfa <tick+0x4c>
  f8:	47 c0       	rjmp	.+142    	; 0x188 <tick+0xda>
		{
			state = Reset;
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 100:	42 c0       	rjmp	.+132    	; 0x186 <tick+0xd8>
			state = Init;
			break;
		}
		
		case Inc:
		state = Hold;
 102:	84 e0       	ldi	r24, 0x04	; 4
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 108:	08 95       	ret
		
		case Dec:
		state = Hold;
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 110:	08 95       	ret
		
		case Hold:
		if((PINA == 0x01) || (PINA == 0x02))
 112:	80 b1       	in	r24, 0x00	; 0
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	c1 f1       	breq	.+112    	; 0x188 <tick+0xda>
 118:	80 b1       	in	r24, 0x00	; 0
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	a9 f1       	breq	.+106    	; 0x188 <tick+0xda>
		{
			state = Hold;
			break;
		}
		else if(PINA == 0x03)
 11e:	80 b1       	in	r24, 0x00	; 0
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	21 f4       	brne	.+8      	; 0x12c <tick+0x7e>
		{
			state = Reset;
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 12a:	2d c0       	rjmp	.+90     	; 0x186 <tick+0xd8>
		}
		else
		{
			state = Init;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 132:	08 95       	ret
		}
		
		case Reset:
		if((PINA == 0x01) || (PINA == 0x02))
 134:	80 b1       	in	r24, 0x00	; 0
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	31 f1       	breq	.+76     	; 0x186 <tick+0xd8>
 13a:	80 b1       	in	r24, 0x00	; 0
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	19 f1       	breq	.+70     	; 0x186 <tick+0xd8>
		{
			state = Reset;
			break;
		}
		else if (PINA == 0x03)
 140:	80 b1       	in	r24, 0x00	; 0
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	01 f5       	brne	.+64     	; 0x186 <tick+0xd8>
		{
			state = Init;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 14c:	08 95       	ret
		}
		
		default:
		break;
	}
	switch(state){ //State actions
 14e:	82 30       	cpi	r24, 0x02	; 2
 150:	61 f0       	breq	.+24     	; 0x16a <tick+0xbc>
 152:	18 f4       	brcc	.+6      	; 0x15a <tick+0xac>
 154:	88 23       	and	r24, r24
 156:	31 f0       	breq	.+12     	; 0x164 <tick+0xb6>
 158:	08 95       	ret
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	69 f0       	breq	.+26     	; 0x178 <tick+0xca>
 15e:	85 30       	cpi	r24, 0x05	; 5
 160:	91 f0       	breq	.+36     	; 0x186 <tick+0xd8>
 162:	08 95       	ret
		case Start:
		PORTC = 0x07;
 164:	87 e0       	ldi	r24, 0x07	; 7
 166:	88 b9       	out	0x08, r24	; 8
		break;
 168:	08 95       	ret
		
		case Init:
		break;
		
		case Inc:
		if(PORTC < 0x09)
 16a:	88 b1       	in	r24, 0x08	; 8
 16c:	89 30       	cpi	r24, 0x09	; 9
 16e:	60 f4       	brcc	.+24     	; 0x188 <tick+0xda>
		{
			PORTC += 0x01;
 170:	88 b1       	in	r24, 0x08	; 8
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	88 b9       	out	0x08, r24	; 8
			break;
 176:	08 95       	ret
		}
		break;
		
		case Dec:
		if(PORTC > 0x00)
 178:	88 b1       	in	r24, 0x08	; 8
 17a:	88 23       	and	r24, r24
 17c:	29 f0       	breq	.+10     	; 0x188 <tick+0xda>
		{
			PORTC -= 0x01;
 17e:	88 b1       	in	r24, 0x08	; 8
 180:	81 50       	subi	r24, 0x01	; 1
 182:	88 b9       	out	0x08, r24	; 8
			break;
 184:	08 95       	ret
		
		case Hold:
		break;
		
		case Reset:
		PORTC = 0x00;
 186:	18 b8       	out	0x08, r1	; 8
 188:	08 95       	ret

0000018a <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 18a:	11 b8       	out	0x01, r1	; 1
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x07;
 190:	87 b9       	out	0x07, r24	; 7
 192:	87 e0       	ldi	r24, 0x07	; 7
 194:	88 b9       	out	0x08, r24	; 8
	state = Start;
 196:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	while(1)
	{
		tick();
 19a:	89 df       	rcall	.-238    	; 0xae <tick>
 19c:	fe cf       	rjmp	.-4      	; 0x19a <main+0x10>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>

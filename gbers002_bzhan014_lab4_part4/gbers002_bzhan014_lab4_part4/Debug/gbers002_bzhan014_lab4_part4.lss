
gbers002_bzhan014_lab4_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000240  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000896  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000313  00000000  00000000  0000133b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001650  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000434  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	84 d0       	rcall	.+264    	; 0x1b2 <main>
  aa:	8e c0       	rjmp	.+284    	; 0x1c8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tick>:

#include <avr/io.h>
enum States{start, input, pound, r_pound, unlock, lock} state;
unsigned char hold = 0x00;
void tick() {
	switch(state) {
  ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	e9 f0       	breq	.+58     	; 0xf0 <tick+0x42>
  b6:	28 f4       	brcc	.+10     	; 0xc2 <tick+0x14>
  b8:	88 23       	and	r24, r24
  ba:	59 f0       	breq	.+22     	; 0xd2 <tick+0x24>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	69 f0       	breq	.+26     	; 0xda <tick+0x2c>
  c0:	56 c0       	rjmp	.+172    	; 0x16e <tick+0xc0>
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	09 f4       	brne	.+2      	; 0xc8 <tick+0x1a>
  c6:	3f c0       	rjmp	.+126    	; 0x146 <tick+0x98>
  c8:	80 f1       	brcs	.+96     	; 0x12a <tick+0x7c>
  ca:	85 30       	cpi	r24, 0x05	; 5
  cc:	09 f4       	brne	.+2      	; 0xd0 <tick+0x22>
  ce:	4b c0       	rjmp	.+150    	; 0x166 <tick+0xb8>
  d0:	4e c0       	rjmp	.+156    	; 0x16e <tick+0xc0>
		case start:
			state = input;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
  d8:	57 c0       	rjmp	.+174    	; 0x188 <tick+0xda>
		case input:
			if(PINA == 0x04) {
  da:	80 b1       	in	r24, 0x00	; 0
  dc:	84 30       	cpi	r24, 0x04	; 4
  de:	09 f0       	breq	.+2      	; 0xe2 <tick+0x34>
  e0:	53 c0       	rjmp	.+166    	; 0x188 <tick+0xda>
				state = pound;
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
				hold = 0x01;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  ee:	4f c0       	rjmp	.+158    	; 0x18e <tick+0xe0>
			else {
				state = input;
			}
			break;
		case pound: 
			if(PINA == 0x04 && hold == 0x01) {
  f0:	80 b1       	in	r24, 0x00	; 0
  f2:	84 30       	cpi	r24, 0x04	; 4
  f4:	29 f4       	brne	.+10     	; 0x100 <tick+0x52>
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	09 f4       	brne	.+2      	; 0x100 <tick+0x52>
  fe:	47 c0       	rjmp	.+142    	; 0x18e <tick+0xe0>
				state = pound;
			}
			else if (PINA == 0x00) {
 100:	80 b1       	in	r24, 0x00	; 0
 102:	81 11       	cpse	r24, r1
 104:	03 c0       	rjmp	.+6      	; 0x10c <tick+0x5e>
				state = pound;
				hold = 0x00;
 106:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 10a:	41 c0       	rjmp	.+130    	; 0x18e <tick+0xe0>
			}
			else if (PINA == 0x02 && hold == 0x00) {
 10c:	80 b1       	in	r24, 0x00	; 0
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	41 f4       	brne	.+16     	; 0x122 <tick+0x74>
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 116:	81 11       	cpse	r24, r1
 118:	04 c0       	rjmp	.+8      	; 0x122 <tick+0x74>
				state = r_pound;
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 120:	39 c0       	rjmp	.+114    	; 0x194 <tick+0xe6>
			}
			else {
				state = input;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 128:	2f c0       	rjmp	.+94     	; 0x188 <tick+0xda>
			}
			break;
		case r_pound:
			if (PORTB == 0x00) {
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	81 11       	cpse	r24, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <tick+0x8a>
				state = unlock;
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 136:	31 c0       	rjmp	.+98     	; 0x19a <tick+0xec>
			}
			else if (PORTB == 0x01) { //part 4
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	59 f5       	brne	.+86     	; 0x194 <tick+0xe6>
				state = lock;
 13e:	85 e0       	ldi	r24, 0x05	; 5
 140:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 144:	2f c0       	rjmp	.+94     	; 0x1a4 <tick+0xf6>
			}
			break;
		case unlock: 
			if (PINA == 0x80) {
 146:	80 b1       	in	r24, 0x00	; 0
 148:	80 38       	cpi	r24, 0x80	; 128
 14a:	71 f5       	brne	.+92     	; 0x1a8 <tick+0xfa>
				state = lock;
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			}
			if (PINA == 0x02) { //part4
 152:	80 b1       	in	r24, 0x00	; 0
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	31 f5       	brne	.+76     	; 0x1a4 <tick+0xf6>
				state = pound;
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
				hold = 0x01;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 164:	14 c0       	rjmp	.+40     	; 0x18e <tick+0xe0>
			}
			break;
		case lock: 
			state = input;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 16c:	0d c0       	rjmp	.+26     	; 0x188 <tick+0xda>
	}
	switch(state) {
 16e:	83 30       	cpi	r24, 0x03	; 3
 170:	89 f0       	breq	.+34     	; 0x194 <tick+0xe6>
 172:	28 f4       	brcc	.+10     	; 0x17e <tick+0xd0>
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	41 f0       	breq	.+16     	; 0x188 <tick+0xda>
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	d1 f4       	brne	.+52     	; 0x1b0 <tick+0x102>
 17c:	08 c0       	rjmp	.+16     	; 0x18e <tick+0xe0>
 17e:	84 30       	cpi	r24, 0x04	; 4
 180:	61 f0       	breq	.+24     	; 0x19a <tick+0xec>
 182:	85 30       	cpi	r24, 0x05	; 5
 184:	79 f0       	breq	.+30     	; 0x1a4 <tick+0xf6>
 186:	08 95       	ret
		case input:
			PORTC = 0x01;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	88 b9       	out	0x08, r24	; 8
			break;
 18c:	08 95       	ret
		case pound:
			PORTC = 0x02;
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	88 b9       	out	0x08, r24	; 8
			break;
 192:	08 95       	ret
		case r_pound:
			PORTC = 0x04;
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	88 b9       	out	0x08, r24	; 8
			break;
 198:	08 95       	ret
		case unlock:
			PORTC = 0x08;
 19a:	88 e0       	ldi	r24, 0x08	; 8
 19c:	88 b9       	out	0x08, r24	; 8
			PORTB = 0x01;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	85 b9       	out	0x05, r24	; 5
			break;
 1a2:	08 95       	ret
		case lock:
			PORTB = 0x00;
 1a4:	15 b8       	out	0x05, r1	; 5
			break;
	}
}
 1a6:	08 95       	ret
			break;
		case unlock: 
			if (PINA == 0x80) {
				state = lock;
			}
			if (PINA == 0x02) { //part4
 1a8:	80 b1       	in	r24, 0x00	; 0
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	b1 f7       	brne	.-20     	; 0x19a <tick+0xec>
 1ae:	d4 cf       	rjmp	.-88     	; 0x158 <tick+0xaa>
 1b0:	08 95       	ret

000001b2 <main>:
	}
}

int main(void)
{
    DDRA = 0x00; PORTA = 0xFF;
 1b2:	11 b8       	out	0x01, r1	; 1
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 1b8:	84 b9       	out	0x04, r24	; 4
 1ba:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 1bc:	87 b9       	out	0x07, r24	; 7
 1be:	18 b8       	out	0x08, r1	; 8
	state = start;
 1c0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
    while (1) 
    {
		tick();
 1c4:	74 df       	rcall	.-280    	; 0xae <tick>
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <main+0x12>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
